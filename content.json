{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"线性代数1","slug":"线性代数1","date":"2021-03-23T08:44:50.000Z","updated":"2021-03-25T09:40:27.072Z","comments":true,"path":"2021/03/23/线性代数1/","link":"","permalink":"http://example.com/2021/03/23/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B01/","excerpt":"","text":"0. 说明最近在复习线性代数. 感觉以前学的数学快忘光了, 只有一点模糊的印象, 很多具体的公式和概念已经很模糊了. 所以打算先从线性代数开始复习, 之后可能还会复习一下微积分和数理统计, 如果有需要, 之后还会学习一下离散数学, 实分析, 图论等数学知识. 选择的学习材料是MIT的18.06课程. 看了一部分视频, 但还是觉得看书更快一点, 总结的也更全面. 书使用的就是18.06的教材: Introduction To Linear Algebra. 在这里写下的不是完整的笔记(个人也不太喜欢边看书/听课边记笔记). 在看书或者听课的时候, 记下简单的线索就可以了. 所以写的大多是看过相关章节后的个人总结. 所以可能会有错误或者信息不全的问题. 但对个人学习来说, 错误的总结也好过精美的摘抄. 之后也可能在回顾的时候, 修改一些明显的错误. 1. Chapter 1 &amp; 2这一部分的重点内容有两项, 第一是通过直观的体验(方程组,图像等)获得对线性代数的一些直觉; 第二是通过对肖元法的学习理解一些基础的概念. 1.1 从线性方程组开始从2个未知数2个方程（且有唯一解）说起吧, 因为这样的图比较好画. 如下图所示的方程组，相信求解是很容易的（肖元即可）. 而这一部分的线性代数所讲述的内容, 不会超过求解这个方程组的难度, 只是用矩阵/线性代数的语言和逻辑描述而已:$$x - 2y = 1\\\\3x + 2y = 11$$ 既然是线性代数, 首先当然是线性的概念了. 所谓线性, 就是所有的未知数(即x, y)都是一次的, 并且不存在相乘的情况(即没有xy项). 线性方程组也就是多元一次方程组. 因为这样的一次项, 把他画出来是一条条直线, 而不是曲线, 所以就叫做”线性”. 当一次只看一行(一个方程时), 这样的图像可以很清楚的画出来: 当将这个问题, 用向量的角度来看待的时候, 就变成了:$$x\\begin{bmatrix}1\\\\3\\end{bmatrix}+y\\begin{bmatrix}-2\\\\2\\end{bmatrix}=\\begin{bmatrix}1\\\\11\\end{bmatrix}$$这时候, 将x与y看作时两个向量的系数, 最终求和的结果就是等号右边的向量: 在二维(甚至3维)的情况下, 前面一种方法都是看起来更简单的方法. 但实际上, 后面一种向量求和的方法在多维的情况下是更简单的: 因为无论维度如何增加, 一个向量只不过是一条直线而已. 这两种方法分别叫做row picture和column picture. 1.2 矩阵开始不过是一种表示方法将上述的过程用矩阵的形式表示出来, 就变成了:$$\\begin{bmatrix}1&amp;-2\\\\3&amp;2\\end{bmatrix}\\begin{bmatrix}x\\\\y\\end{bmatrix}=\\begin{bmatrix}1\\\\11\\end{bmatrix}$$按照1.1中的两种看待方法, row picture就是每一次取左侧矩阵的一行, 然后跟列向量(x, y)作点乘. column picture则是将x和y看作两个向量(1, 3)和(-2, 2)的倍数, 或者称作这两个向量的线性组合. 到这为止, 对矩阵的直观印象就差不多了. 下面将这个例子扩展一点, 就可以了解矩阵乘法是怎么操作的了 1.3 矩阵乘法当把刚才的方程组扩展一点, 假设未知数前面的系数不边, 但是新增两个位置数x0, y0(即新出现一个问题), 同时显然的结果也会变化:$$\\begin{bmatrix}1&amp;-2\\\\3&amp;2\\end{bmatrix}\\begin{bmatrix}x&amp;x_0\\\\y&amp;y_0\\end{bmatrix}=\\begin{bmatrix}1&amp;2\\\\11&amp;22\\end{bmatrix}$$这样其实就变成了矩阵乘法. 这里先介绍一个基本规则, 假设两个矩阵的维度是m*n与n*p, 那么乘积的结果就是m*p的矩阵. 其中的n要是相等的, 就是矩阵相乘的前置条件. 矩阵乘法的前两种规则, 与row picture和column picture相同, 就是一次看左边矩阵的一行或者一列, 这里就不再赘述了. 但实际上, 更常用的方法是另外两种: 内积和外积. 内积的结果是一个数, 外积的结果是一个矩阵. 具体来说: 其中, x和y都是向量, 且在数学中, 表示的是一个列向量(竖行), 而用$x^T$表示行向量. 所以, 使用内积的角度, 就是每次有一行乘以一列, 得到的结果就是结果矩阵中对应位置的那个数值(如第i行点乘第j列的结果, 就是结果矩阵中i行j列上的元素的数值). 更推荐的是外积的角度看待矩阵乘法, 也就是一列乘以一行, 这样成绩是一个与最终结果矩阵尺寸相同的矩阵. 将所有列行的乘积结果相加, 就得到了最终的结果. 需要注意的是, 在矩阵乘法中顺序是很重要的, 即AB不等于BA. 1.4 转置上面其实已经提到了一点, $x^T$就是转置, 这个概念比较简单, 就是行列互换而已. 但注意, 成绩的转置顺序是相反的, 这点与逆矩阵类似. 总之, 矩阵乘起来以后, 顺序就很重要. 有些比较有趣的结论: 首先是, 在column picture中, 可以将Ax看作是左边(系数矩阵)的列向量的线性组合. 当取Ax的转置时, 会得到$(Ax)^T=x^TA^T$, 则:$$\\begin{bmatrix}x&amp;y\\end{bmatrix}\\begin{bmatrix}1&amp;3\\\\-2&amp;2\\end{bmatrix}=\\begin{bmatrix}1&amp;11\\end{bmatrix}$$这个时候, 与上面道理相同, 就可以看作时右边矩阵的行向量的线性组合, 即:$$x\\begin{bmatrix}1&amp;3\\end{bmatrix}+y\\begin{bmatrix}-2&amp;2\\end{bmatrix}=\\begin{bmatrix}1&amp;11\\end{bmatrix}$$总结起来就是这样的: 当$A^T=A$时, 这个矩阵被称为对称矩阵(Symmetric), 一般记作S. 在消元法中, $S=LDL^T$, 即U是L的转置(具体参考1.5) 1.5 肖元法(Elimination)这部分其实很简单, 首先不考虑行交换, 跟一般解线性方程组过程一样, 一个个小区主元下面的参数: 从这里能看出两件事, 第一是, Matrices do something! 例如E21的作用时从第二行中, 减去3被的第一行. 第二是, 整体流程为 A = LU. 当然, 对U矩阵还可以进一步将主元分离出来, 变成A=LDU, 其中D只有对角线上的元素不为零, 且数值就是主元的值. 这时候U中的对角线都变为1. 消元法还启示了一种重要的线性代数的用法, 即矩阵分解(Factorization), 也就是将一个复杂一点的矩阵, 分解成几个小矩阵的乘积. 消元法的结果是生成了U(或者DU)矩阵, 在U中, 对角线上不为0的元素就是pivot主元. 当每一列都有且只有一个主元的时候, 这个矩阵才有逆矩阵. 否则, 要么方程组没有解(0!=0)或者有多个解. 1.6 增广矩阵与逆增广矩阵比较简单, 就是把两个矩阵放在一起, 如$[A\\space |\\space b]$. 逆矩阵在上面介绍了一点, 当一个矩阵有逆矩阵时, 会有$AA^{-1}=I$. 注意的是(与转置差不多)$$(AB)^{-1} = B^{-1}A^{-1}$$求逆矩阵的过程挺复杂的, 手动计算的话, 方法就是:$$[A\\space I] –&gt; [I\\space A^{-1}]$$ 1.7 换行矩阵(Permutation)这部分最后一点是关于换行矩阵的. 之前的肖元法假设不包括换行的过程, 但实际上, 换行还是有必要的. 一个换行矩阵就是单位矩阵中的任意两行进行交换, 特点是每一行和每一列有且只有一个1. 加入换行矩阵后, 消元法的公式就变成了:$$PA = LDU$$","categories":[],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"创建个人博客Hexo+Github","slug":"创建个人博客Hexo-Github","date":"2021-03-22T08:45:31.000Z","updated":"2021-03-25T09:36:36.375Z","comments":true,"path":"2021/03/22/创建个人博客Hexo-Github/","link":"","permalink":"http://example.com/2021/03/22/%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2Hexo-Github/","excerpt":"","text":"1. 个人技术博客的初衷个人认为, 内容才是个人技术博客的核心. 因此博客设立的开始便准备依据MVP原则, 先创建一个可以写技术内容, 分享经验的地方, 对博客技术上的复杂内容, 准备之后再慢慢了解. 因此, 在创建博客的时候, 一开始只是打算使用github page部署出一个页面. 但pages其实只是使用readme.md或index.html生成一个页面, 写作时诸多不便. 简单搜索b站相关视频后决定, 采用Hexo生成静态博客, 再将其部署到Github上(这样选择的原因仅仅是找到的比较完整的教程, 使用的是这样的技术框架). 至于为什么想创建一个技术博客, 有几点关键的原因: ​ 在日常学习的过程中, 感觉到费曼学习法是最有效的方法, 即将学到的知识, 用自己的话(假设在教别人)表达出来. 博客第一个功能便是记录了日常学习, 也是现阶段的主要功能 ​ &lt;原则&gt;里面讲, 头脑极度开放, 才能取得做大的进步及有意义的人际关系, 所以博客是有一个可以”开放”自己思想的地方, 对形成这样的习惯集有好处, 这便是第二个初衷 ​ 我的工作性质是既有研究, 又需要支持项目的AI算法工程师. 不是科班出身, 近期才开始转行. 所以在日常工作和学习中, 经常遇到这样那样的问题, 讲这些问题, 及尝试过的解决方案和最终解决方案写出来, 个人相信也是一件很有意义的事情 所以基于以上三点创建了这个简单的博客. 现阶段的计划是, 根据学习和工作内容, 整理一些理论和实践知识与经验. 之后如何利用博客, 便是以后才应该考虑的事情了. 2. 创建博客使用的系统是win10, 已安装git bash, 已有GitHub账号. 总体流程就是配置环境–&gt;安装hexo–&gt;使用hexo创建博客–&gt;部署到github–&gt;选择一个主题 Step 1: 配置Node与Npm 安装Node.js : 会自动安装Node + Npm Step 2: 安装hexo 1npm install hexo-cli -g Step 3: 使用Hexo创建博客 先新建一个文件夹 初始化hexo项目 12# cd &lt;blog dir&gt;hexo init 本地预览 1hexo s # s:server. localhost:4000 新建文章 1hexo n &quot;&lt;title&gt;&quot; # create .md file under ../source/_posts/ 生成静态文件 在使用hexo s命令时，自动会根据新增文章，生成静态的网页了。但也同时会启动本地服务. 若在之后使用时, 只是想生成静态文件, 而不必启动本地服务(部署在远端服务器之上), 则可以使用generate命令 12hexo clean # cleanhexo genearte # hexo g Step 4: 部署到github 在github上新建一个repo, 其中repo的名字为&lt;用户名&gt;.github.io: repo名字中的用户名需要跟github用户名完全一致的原因是, Github默认讲这个地址提供给用户使用 安装 deployer-git 1npm install hexo-deployer-git --save 修改 _config.yml文件： 在这个配置文件的最后的deploy部分, 修改type, repo 和branch(branch默认为master, 可以不配置) hexo deploy: 使用命令, 将本地的hexo项目部署到github上 若在这一步出现问题, 首先检查上一步的config是否配置正确. 其次可以使用Git bash来执行(使用自带命令行, 有时不出现输入github账号和密码的部分) 1hexo d # hexo deploy 至此, 一个简易的Hexo个人博客就部署在github上面了. 之后写文章时, 使用hexo n &quot;title&quot;的命令, 或者直接在``../source/_posts/文件夹中创建md文件即可. 然后使用hexo d`部署到github就完成了. 3. 主题修改在Github上有许多hexo的主题, 目前选用的是yilia. 若要更换主题, 只需要将项目git clone到hexo文件夹中的themes文件夹中, 并在_config.yml文件中修改theme字段为themes文件夹中的主题名称. 示例代码: 1234git clone https://github.com/litten/hexo-theme-yilia.git# 修改_config.yml: theme: &lt;主题名称&gt;（是文件夹的名字）hexo ghexo d 4. 方便的插入图片在插入图片的时候, 如何将图片也一起部署到github, 还挺麻烦的. 找到的最简便方法是: 4.1 首先安装hexo-rendered-marked, 之后更改config配置, 这样的话, 在创建新文档的是后, 会多生成一个文件夹, 名称与文章名称相同. 1npm install hexo-renderer-marked # install 在这样的配置之后，可以通过![](image.jpg)的方式来插入图片(image.jpg存放在与md文件相同目录的, 名字为文章名的文件夹中). 但只使用这样的方法, 需要将图片都手动放到这个文件夹中 4.2 使用Typora简化工作 打开typora的偏好设置(ctrl + 逗号), 进行下面的配置: 这样配置后, 在typora中插入图片时, 会自动新建文件夹来存储图片, 并且使用相对路径来表示: ![image-20210322140024928](image-20210322140024928.png) 4.3 结合1, 2两部分配置, 现在只需要将”文件夹名/“(后面有斜杠)去掉即可一键部署了. 使用Ctrl+F在Typora中查找并替换成空格即可. ps: 这样操作之后, 在本地看不见图片了. 但启动hexo服务后, 可以在网页端看到图片","categories":[],"tags":[{"name":"CS","slug":"CS","permalink":"http://example.com/tags/CS/"}]}],"categories":[],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"CS","slug":"CS","permalink":"http://example.com/tags/CS/"}]}